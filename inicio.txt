Olá esse é um passo a passo de como utilizar o Git, caso tenha dúvidas de onde baixar o Git READ.ME localizado no início desse repositório, lembrando que os comandos 
disponibilizados estão ordenados para caso queira utiliza-los em forma de exercício

O arquivo será organizado em um sumário

#######
Sumário
#######

1. Códigos e conceitos base
2. Definindo e enviando para Nuvem
3. Novos códigos e conceitos
4. Resumo dos códigos usuais

########################################

1. Códigos e conceitos básicos

Após abrir o Git com o Git Bash Here já referenciado no arquivo READ.ME temos alguns preparativos a serem realizados, o primeiro é o seguinte código 

git init        este código irá criar um repositório dentro da pasta que executou o Git	Bash Here lembrando que este repositório no caso é criado como arquivo oculto

Logo depois desse comando é possível colocar ou criar o arquivo que deseja dentro da pasta e verificar quais arquivos foram adicionados e quais ainda não foram ao Git

git status      este comando verifica qual a situação atual do git, arquivos que ainda não foram adicionados, ou que foram modificados

git add 	existem duas formas de executar esse comando a mais simples é utilizando o Git add "nome_do_arquivo" caso não saiba o nome do arquivo basta abrir-lo
		com propriedades, lembrando que não precisa ser o caminho inteiro, pois o Git já esta considerando aquela pasta em que foi criado, este comando é utilizado
		para adicionar especificamente um arquivo ao Git e a segunda é utilizando git add . que seria para adicionar todos os arquivos que estiverem na pasta
		
git commit -m "texto" 	o comando commit é utilizado para realizar a mudança feita no arquivo anotando uma breve informação do que foi modificado no mesmo

Caso for a primeira vez rodando esse comando aparecerá uma mensagem dizendo para configurar seu usuário, aqui utilizaremos o mesmo login e senha do seu GitHub

########################################

2. Definindo e enviando para Nuvem

Agora já definiremos o caminho que seu git deverá ser direcionado, caso for a primeira vez que executou o comando commit teremos que definir seu usuário do GitHub utilizando dos comandos

git config --global user.email "seu_email"  		configura seu email
git config --global user.name "seu_nome_no_GitHub"	configura seu nome

Assim podemos rodar novamente o comando git commit

##OBSERVAÇÃO##

Caso queira definir esse repositório para um outro email e usuário específico pode ser
utilizado os seguintes comandos

git config user.email "seu_email"		Lembrando que nesse caso em específico os dados git config user.name "seu_nome_no_GitHub" estão focados nesse repositório em específico

##############

Após configurar seu email e nome de usuário será requisitado que defina uma url do repositório do GitHub no caso seu repositório criado assim utilizamos o comando

git remote add origin <link_da_url>		Define um caminho do Git para o GitHub

Agora é nescessário definir um caminho para o repositório do GitHub assim utilizamos o código

git push --set-upstream origin master

Será notificado no seu Git a necessidade de login no GitHub para obter autorização para o envio após a autorização do mesmo a primeira versão do código esta disponível no GitHub, atualize
a página e verifique a Branch master

########################################

3. Novos códigos e conceitos

Embora seja possível sempre atualizar seu código pode ocorrer de algumas mudança acabar prejudicando ou causando mais problemas do que soluções, podemos fazer o procedimento de mudar
entre as versões (as registradas pelo commit) pelo seguinte comando

git reflog		Este comando verá todas as atualizações feitas no seu código

Para mudar para uma versão mais antiga ou mais nova basta utilizar o comando

git reset --hard ID	O ID seria da versão que você escolher mostrada no reflog, ele é referido pela primeira sequência de números e letras no início do campo do comando reflog

##OBSERVAÇÃO##

Em casos de trabalhos, projetos e afins, sempre consulte seu time, grupo ou empresa se esse procedimento é aceitável no devido momento

##############

Bom agora que já estamos configurados tanto Git como GitHub podemos criar várias versões do código, nesta idéia introduzimos as idéias de "branches" que são ramificações do seu código 
assim para criar ramificações diferentes e nunca interferir diretamente no código base as utilizamos, seus comandos e manipulações são as seguintes

git branch		mostra quais branches estão disponíveis no momento

git branch <nome_da_nova_branch>	assim criamos uma nova branch que se baseia diretamente do branch master, que é sua branch inicial

Se modificarmos o arquivo dentro do nosso repositório e executarmos o comando git status iremos ter uma observação que obtemos uma nova modificação, só que como estamos na nova branch 
teremos modificado apenas nela e não diretamente no nosso código principal assim repetimos o mesmo processo dos comandos git add -> git commit -> git push, e se verificarmos no GitHub
na branch criada teremos todas suas modificações registradas, caso queira agora inserir as modificações da nova branch na principal utilizaremos outro comando 

git checkout master		esse comando git checkout <nome_da_branch> irá para outra branch

git merge <nome_da_nova_branch>		esse comando une as branches, lembrando que um requisito é estar na sua branch que deseja união

##OBSERVAÇÃO##

Caso em trabalhos em grupos sempre é útil exercutarmos o comando git pull na branch principal, para termos certeza que nossos dados estão atualizados, pois apenas assim garantiremos
que nenhuma modificação que iremos fazer estará desatualizadam em relação ao código principal, assim é comum sempre começarmos com o git pull, e daí modificarmos o código

##############

Unindo a branch temporária a branch principal teremos que realizar os mesmos passos anteriores com git add -> git commit -> git push

########################################

4. Resumo dos códigos usuais
git status	utilizado para observar os status do nosso git na branch que estamos
git branch	mostra uma lista com as branchs que temos no repositório e a que estamos
git pull	atualiza o nosso repositório local para a versão mais atual
git add		adiciona os arquivos ao repositório (modificados ou não)
git commit	envia os arquivos modificados com uma breve descrição da modificação
git push	envia as mudanças do repositório do git para o github
git merge	une as mudanças de uma branch em outra (normalmente uma secundária para master)
git checkout <nome da branch>		muda de uma branch atual para uma outra
git branch <nome da nova branch>	cria uma nova branch tendo como base a branch principal 
git branch -d <nome da branch>		exclui a branch criada